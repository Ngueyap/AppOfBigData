# -*- coding: utf-8 -*-
"""weather-classification-TP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pY4LUXqCtkoF0k5-d0YaD0txpR1UaDmw

# **Imports**

Taken from : https://www.kaggle.com/datasets/utkarshsaxenadn/weather-classification-resnet152v2
"""
# manipulation dossiers et repertoires
import os 
from os import walk
import time
# Common
import tensorflow
from tensorflow import keras
#import keras
import numpy as np
import pandas as pd
from glob import glob
from tqdm import tqdm

# Data
from tensorflow.image import resize
from sklearn.model_selection import StratifiedShuffleSplit
from keras.utils import load_img, img_to_array, plot_model

# Data Viz
import seaborn as sns
import matplotlib.pyplot as plt

# TL Model
from keras.applications import ResNet50, ResNet50V2, InceptionV3, Xception, ResNet152, ResNet152V2

# Model
from keras import Sequential
from keras.layers import Dense, GlobalAvgPool2D, Dropout
from keras.models import load_model

# Callbacks 
from keras.callbacks import EarlyStopping, ModelCheckpoint

# Model Performance
from sklearn.metrics import classification_report

# Model Viz
#from tensorflow.keras.utils import plot_model

"""# Data and utilities"""

# Cateories
class_names = {0: 'cloudy', 1: 'foggy', 2: 'rainy', 3: 'shine', 4: 'sunrise'}

def load_image(path):
    '''
    Takes in path of the image and load it
    '''
    img = resize(img_to_array(load_img(path))/255., (256,256))
    return img

def show_image(image, title=None):
    '''
    Takes in an Image and plot it with Matplotlib
    '''
    plt.imshow(image)
    plt.title(title)
    plt.axis('off')

def load_data(img_paths):
    X = np.zeros(shape=(len(img_paths), 256,256,3))

    for i, path in tqdm(enumerate(img_paths), desc="Loading"):
        X[i] = load_image(path)
    
    return X

"""# Load images"""

image_paths = sorted(glob('/projet/image/*.jpg')+glob('/projet/image/*.png')+glob('/projet/image/*.jfif')+glob('/projet/image/*.jpeg'))

print(f"Total Number of Images : {len(image_paths)}")
print(image_paths)

image_paths[:5]

images = load_data(image_paths)

"""# **Data Viz**"""

##plt.figure(figsize=(10,10))
for i in range(25):
    
    if i > len(images)-1:
        break
    
    image = images[i]

#plt.subplot(5,5,i+1)
#show_image(image, title=f"Image : {i}")
#plt.tight_layout()
#plt.show()

"""# Prediction with pre-trained ResNet152V2 model"""

# Load model
model_v3 = load_model('./ResNet152V2-Weather-Classification-03.h5')

# Make Predictions
preds = np.argmax(model_v3.predict(images), axis=-1)

"""# Result"""
#plt.figure(figsize=(15,20))
for i in range(25):
    
    if i > len(images)-1:
        break
    
    image = images[i]
    pred = class_names[list(preds)[i]]
#    plt.subplot(5,5,i+1)
#    show_image(image, title=f"Image : {pred}")
#plt.tight_layout()
#plt.show()
prediction = []
for i, im in enumerate(images):

    # Make Prediction*
    pred = class_names[list(preds)[i]]
    prediction.append(pred)
    # Show Prediction
#    plt.subplot(5,5,i+1)
#    show_image(im, title=f"Prediction : {pred}")
    
#plt.tight_layout()
#plt.show()


    #  creer le fichier csv 

img=[el.split("/").pop(-1) for el in image_paths]
pred = {'mon image':img, 'Prediction':prediction }
df = pd.DataFrame(pred)
df.to_csv("/projet/prediction/prediction_du_.csv", index = False, header = True)


    #renommer le fichier csv
nom_fichier = "/projet/prediction/prediction_du_.csv"
dateActu = time.strftime("%Y%m%d%H%M%S")
nouveau_nom_fichier = nom_fichier.split(".")[0]+dateActu+"."+nom_fichier.split(".")[1]
os.rename(nom_fichier, nouveau_nom_fichier)


